# include <iostream>
# include <string.h>
# include <stdlib.h>

using namespace std;

// Parcial 2 de algoritmos y programacion 1 (David Correa Posada)

// parametrizacion
void LLENAR_MATRIZ (long [][4], int &, int &);
void MOSTRAR_MATRIZ (long [][4], int &, int &);
void LLENAR_VECTOR (long [][4], long [], int [], int [], long [], int [], long [], int, int);

// programa principal
int main ()
{
    // variables
    int Opcion, Prueba_Adm [100], Prueba_Fin [100], Prueba_Tecn [100], Cont_P, Puntaje_Total [100], Puntaje_G [100], Puntaje_A [100], Puntaje_Mayor_G, Puntaje_Menor_G, Puntaje_Mayor_A, Puntaje_Menor_A, Cont_G, Cont_A, Cant_F, Cant_C, Cant_V, Estado, Vr_Buscar;
	long Matriz [100][4], Cedula [100], Cedula_G [100], Cedula_A [100];
    string Nuevo_A; 

    do
    {
        cout << "Bienvenido al menu " << endl;
        cout << "1. Captura de informacion " << endl;
        cout << "2. Procesar informacion " << endl;
        cout << "3. Aspirantes a cargo de gerente " << endl;
        cout << "4. Aspirantes a cargo de administrador " << endl;
        cout << "5. Estadisticas " << endl;
        cout << "6. Terminar " << endl;

        cout << "Seleccione su opcion ";
        cin >> Opcion;

        switch (Opcion)
        {
            case 1:
                LLENAR_MATRIZ (Matriz, Cant_F, Cant_C);
            break;
        
            case 2:
                LLENAR_VECTOR (Matriz, Cedula, Puntaje_Total, Puntaje_G, Cedula_G, Puntaje_G, Cedula_G, Cant_F, Cant_C);
            break;

            case 3:

            break;

            case 4:

            break;

            case 5:

            break;

            default:
            break;
        }
    } 
    while (Opcion >= 1 && Opcion <= 5);
    return EXIT_SUCCESS;
}

// procedimiento para el llenado de la matriz
void LLENAR_MATRIZ (long Matr [][4], int &CantF, int &CantC) 
{
    // Variables
    int I_F, I_C;

    cout << "ingrese la cantidad de filas ";
    cin >> CantF;

    CantC = 4;

    for (I_F = 1; I_F <= CantF; I_F ++)
    {
        cout << "ingrese la cedula ";
        cin >> Matr [I_F][0];

        cout << "ingrese el puntaje de la prueba de administracion ";
        cin >> Matr [I_F][1];

        cout << "ingrese el puntaje de la prueba de finanzas ";
        cin >>  Matr [I_F][2];

        cout << "ingrese el puntaje de la prueba tecnica ";
        cin >> Matr [I_F][3];
    }
    MOSTRAR_MATRIZ (Matr, CantF, CantC);
}

// procedimiento para mostrar la matriz
void MOSTRAR_MATRIZ (long Matr[][4], int &CantF, int &CantC)
{
    // Variables:
	int I_F, I_C;

    cout << "Matriz de datos: " << endl;

    for (I_F = 1; I_F <= CantF; I_F ++)
    {
        cout << Matr [I_F][0] << " " << Matr [I_F][1] << " " << Matr [I_F][2] << " " << Matr [I_F][3];

        cout << endl;
    }
}

// procedimiento para llenar los vectores
void LLENAR_VECTOR (long Matr [][4], long Cedu [], int PuntajeTotal [], int PuntajeG [], long CedulaG [], int PuntajeA [], long CedulaA [], int CantF, int CantC)
{
	int I_F, I_C, I_F2;

    cout << "Vector de la cedula de los aspirantes a gerente: " << endl;

    I_F2 = 1;

    for (I_F = 1; I_F <= CantF; I_F ++)
    {
        PuntajeTotal [I_F] = Matr [I_F][1] + Matr [I_F][2] + Matr [I_F][3];

        if (PuntajeTotal [I_F] > 400)
        {
            CedulaG [I_F2] = Matr [I_F][0];
            cout << CedulaG [I_F2] << endl;

            I_F2 = I_F2 + 1;
        }
    }

    cout << "Vector del puntaje de los aspirantes a gerente: " << endl;

    I_F2 = 1;

    for (I_F = 1; I_F <= CantF; I_F ++)
    {
        PuntajeTotal [I_F] = Matr [I_F][1] + Matr [I_F][2] + Matr [I_F][3];

        if (PuntajeTotal [I_F] > 400)
        {
            PuntajeG [I_F2] = PuntajeTotal [I_F];
            cout << PuntajeG [I_F2] << endl;

            I_F2 = I_F2 + 1;
        }
    }

    cout << "Vector de la cedula de los aspirantes a administrador: " << endl;

    I_F2 = 1;

    for (I_F = 1; I_F <= CantF; I_F ++)
    {
        PuntajeTotal [I_F] = Matr [I_F][1] + Matr [I_F][2] + Matr [I_F][3];

        if (PuntajeTotal [I_F] > 300 && PuntajeTotal [I_F] <= 400)
        {
            CedulaA [I_F2] = Matr [I_F][0];
            cout << CedulaA [I_F2] << endl;

            I_F2 = I_F2 + 1;
        }
    }

    cout << "Vector del puntaje de los aspirantes a administrador: " << endl;

    I_F2 = 1;

    for (I_F = 1; I_F <= CantF; I_F ++)
    {
        PuntajeTotal [I_F] = Matr [I_F][1] + Matr [I_F][2] + Matr [I_F][3];

        if (PuntajeTotal [I_F] > 300 && PuntajeTotal [I_F] <= 400)
        {
            PuntajeA [I_F2] = PuntajeTotal [I_F];
            cout << PuntajeA [I_F2] << endl;

            I_F2 = I_F2 + 1;
        }
    }
}

// 

